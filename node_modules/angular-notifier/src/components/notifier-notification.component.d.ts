import { AfterViewInit, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { NotifierAnimationService } from './../services/notifier-animation.service';
import { NotifierConfig } from './../models/notifier-config.model';
import { NotifierNotification } from './../models/notifier-notification.model';
import { NotifierService } from './../services/notifier.service';
import { NotifierTimerService } from './../services/notifier-timer.service';
/**
 * Notifier notification component
 * -------------------------------
 * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this
 * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.
 * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and
 * mouse movements.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NotifierNotificationComponent implements AfterViewInit {
    /**
     * Input: Notification object, contains all details necessary to construct the notification
     */
    notification: NotifierNotification;
    /**
     * Output: Ready event, handles the initialization success by emitting a reference to this notification component
     */
    ready: EventEmitter<NotifierNotificationComponent>;
    /**
     * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component
     */
    dismiss: EventEmitter<string>;
    /**
     * Notifier configuration
     */
    readonly config: NotifierConfig;
    /**
     * Notifier timer service
     */
    private readonly timerService;
    /**
     * Notifier animation service
     */
    private readonly animationService;
    /**
     * Angular renderer, used to preserve the overall DOM abstraction & independence
     */
    private readonly renderer;
    /**
     * Native element reference, used for manipulating DOM properties
     */
    private readonly element;
    /**
     * Current notification height, calculated and cached here (#perfmatters)
     */
    private elementHeight;
    /**
     * Current notification width, calculated and cached here (#perfmatters)
     */
    private elementWidth;
    /**
     * Current notification shift, calculated and cached here (#perfmatters)
     */
    private elementShift;
    /**
     * Constructor
     *
     * @param elementRef               Reference to the component's element
     * @param renderer                 Angular renderer
     * @param notifierService          Notifier service
     * @param notifierTimerService     Notifier timer service
     * @param notifierAnimationService Notifier animation service
     */
    constructor(elementRef: ElementRef, renderer: Renderer2, notifierService: NotifierService, notifierTimerService: NotifierTimerService, notifierAnimationService: NotifierAnimationService);
    /**
     * Component after view init lifecycle hook, setts up the component and then emits the ready event
     */
    ngAfterViewInit(): void;
    /**
     * Get the notifier config
     *
     * @returns Notifier configuration
     */
    getConfig(): NotifierConfig;
    /**
     * Get notification element height (in px)
     *
     * @returns Notification element height (in px)
     */
    getHeight(): number;
    /**
     * Get notification element width (in px)
     *
     * @returns Notification element height (in px)
     */
    getWidth(): number;
    /**
     * Get notification shift offset (in px)
     *
     * @returns Notification element shift offset (in px)
     */
    getShift(): number;
    /**
     * Show (animate in) this notification
     *
     * @returns Promise, resolved when done
     */
    show(): Promise<undefined>;
    /**
     * Hide (animate out) this notification
     *
     * @returns Promise, resolved when done
     */
    hide(): Promise<undefined>;
    /**
     * Shift (move) this notification
     *
     * @param   distance         Distance to shift (in px)
     * @param   shiftToMakePlace Flag, defining in which direction to shift
     * @returns Promise, resolved when done
     */
    shift(distance: number, shiftToMakePlace: boolean): Promise<undefined>;
    /**
     * Handle click on dismiss button
     */
    onClickDismiss(): void;
    /**
     * Handle mouseover over notification area
     */
    onNotificationMouseover(): void;
    /**
     * Handle mouseout from notification area
     */
    onNotificationMouseout(): void;
    /**
     * Handle click on notification area
     */
    onNotificationClick(): void;
    /**
     * Start the auto hide timer (if enabled)
     */
    private startAutoHideTimer();
    /**
     * Pause the auto hide timer (if enabled)
     */
    private pauseAutoHideTimer();
    /**
     * Continue the auto hide timer (if enabled)
     */
    private continueAutoHideTimer();
    /**
     * Stop the auto hide timer (if enabled)
     */
    private stopAutoHideTimer();
    /**
     * Initial notification setup
     */
    private setup();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NotifierNotificationComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NotifierNotificationComponent, "notifier-notification", never, {
    "notification": "notification";
}, {
    "ready": "ready";
    "dismiss": "dismiss";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItbm90aWZpY2F0aW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJub3RpZmllci1ub3RpZmljYXRpb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJJQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb3RpZmllckFuaW1hdGlvblNlcnZpY2UgfSBmcm9tICcuLy4uL3NlcnZpY2VzL25vdGlmaWVyLWFuaW1hdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5vdGlmaWVyQ29uZmlnIH0gZnJvbSAnLi8uLi9tb2RlbHMvbm90aWZpZXItY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyTm90aWZpY2F0aW9uIH0gZnJvbSAnLi8uLi9tb2RlbHMvbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyU2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvbm90aWZpZXIuc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmllclRpbWVyU2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvbm90aWZpZXItdGltZXIuc2VydmljZSc7XG4vKipcbiAqIE5vdGlmaWVyIG5vdGlmaWNhdGlvbiBjb21wb25lbnRcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRoaXMgY29tcG9uZW50IGlzIHJlc3BvbnNpYmxlIGZvciBhY3R1YWxseSBkaXNwbGF5aW5nIHRoZSBub3RpZmljYXRpb24gb24gc2NyZWVuLiBJbiBhZGRpdGlvbiwgaXQncyBhYmxlIHRvIHNob3cgYW5kIGhpZGUgdGhpc1xuICogbm90aWZpY2F0aW9uLCBpbiBwYXJ0aWN1bGFyIHRvIGFuaW1hdGUgdGhpcyBub3RpZmljYXRpb24gaW4gYW5kIG91dCwgYXMgd2VsbCBhcyBzaGlmdCAobW92ZSkgdGhpcyBub3RpZmljYXRpb24gdmVydGljYWxseSBhcm91bmQuXG4gKiBGdXJ0aGVybW9yZSwgdGhlIG5vdGlmaWNhdGlvbiBjb21wb25lbnQgaGFuZGxlcyBhbGwgaW50ZXJhY3Rpb25zIHRoZSB1c2VyIGhhcyB3aXRoIHRoaXMgbm90aWZpY2F0aW9uIC8gY29tcG9uZW50LCBzdWNoIGFzIGNsaWNrcyBhbmRcbiAqIG1vdXNlIG1vdmVtZW50cy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTm90aWZpZXJOb3RpZmljYXRpb25Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICAvKipcbiAgICAgKiBJbnB1dDogTm90aWZpY2F0aW9uIG9iamVjdCwgY29udGFpbnMgYWxsIGRldGFpbHMgbmVjZXNzYXJ5IHRvIGNvbnN0cnVjdCB0aGUgbm90aWZpY2F0aW9uXG4gICAgICovXG4gICAgbm90aWZpY2F0aW9uOiBOb3RpZmllck5vdGlmaWNhdGlvbjtcbiAgICAvKipcbiAgICAgKiBPdXRwdXQ6IFJlYWR5IGV2ZW50LCBoYW5kbGVzIHRoZSBpbml0aWFsaXphdGlvbiBzdWNjZXNzIGJ5IGVtaXR0aW5nIGEgcmVmZXJlbmNlIHRvIHRoaXMgbm90aWZpY2F0aW9uIGNvbXBvbmVudFxuICAgICAqL1xuICAgIHJlYWR5OiBFdmVudEVtaXR0ZXI8Tm90aWZpZXJOb3RpZmljYXRpb25Db21wb25lbnQ+O1xuICAgIC8qKlxuICAgICAqIE91dHB1dDogRGlzbWlzcyBldmVudCwgaGFuZGxlcyB0aGUgY2xpY2sgb24gdGhlIGRpc21pc3MgYnV0dG9uIGJ5IGVtaXR0aW5nIHRoZSBub3RpZmljYXRpb24gSUQgb2YgdGhpcyBub3RpZmljYXRpb24gY29tcG9uZW50XG4gICAgICovXG4gICAgZGlzbWlzczogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogTm90aWZpZXIgY29uZmlndXJhdGlvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbmZpZzogTm90aWZpZXJDb25maWc7XG4gICAgLyoqXG4gICAgICogTm90aWZpZXIgdGltZXIgc2VydmljZVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdGltZXJTZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIE5vdGlmaWVyIGFuaW1hdGlvbiBzZXJ2aWNlXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBhbmltYXRpb25TZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIEFuZ3VsYXIgcmVuZGVyZXIsIHVzZWQgdG8gcHJlc2VydmUgdGhlIG92ZXJhbGwgRE9NIGFic3RyYWN0aW9uICYgaW5kZXBlbmRlbmNlXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlcjtcbiAgICAvKipcbiAgICAgKiBOYXRpdmUgZWxlbWVudCByZWZlcmVuY2UsIHVzZWQgZm9yIG1hbmlwdWxhdGluZyBET00gcHJvcGVydGllc1xuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudDtcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IG5vdGlmaWNhdGlvbiBoZWlnaHQsIGNhbGN1bGF0ZWQgYW5kIGNhY2hlZCBoZXJlICgjcGVyZm1hdHRlcnMpXG4gICAgICovXG4gICAgcHJpdmF0ZSBlbGVtZW50SGVpZ2h0O1xuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgbm90aWZpY2F0aW9uIHdpZHRoLCBjYWxjdWxhdGVkIGFuZCBjYWNoZWQgaGVyZSAoI3BlcmZtYXR0ZXJzKVxuICAgICAqL1xuICAgIHByaXZhdGUgZWxlbWVudFdpZHRoO1xuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgbm90aWZpY2F0aW9uIHNoaWZ0LCBjYWxjdWxhdGVkIGFuZCBjYWNoZWQgaGVyZSAoI3BlcmZtYXR0ZXJzKVxuICAgICAqL1xuICAgIHByaXZhdGUgZWxlbWVudFNoaWZ0O1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudFJlZiAgICAgICAgICAgICAgIFJlZmVyZW5jZSB0byB0aGUgY29tcG9uZW50J3MgZWxlbWVudFxuICAgICAqIEBwYXJhbSByZW5kZXJlciAgICAgICAgICAgICAgICAgQW5ndWxhciByZW5kZXJlclxuICAgICAqIEBwYXJhbSBub3RpZmllclNlcnZpY2UgICAgICAgICAgTm90aWZpZXIgc2VydmljZVxuICAgICAqIEBwYXJhbSBub3RpZmllclRpbWVyU2VydmljZSAgICAgTm90aWZpZXIgdGltZXIgc2VydmljZVxuICAgICAqIEBwYXJhbSBub3RpZmllckFuaW1hdGlvblNlcnZpY2UgTm90aWZpZXIgYW5pbWF0aW9uIHNlcnZpY2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBub3RpZmllclNlcnZpY2U6IE5vdGlmaWVyU2VydmljZSwgbm90aWZpZXJUaW1lclNlcnZpY2U6IE5vdGlmaWVyVGltZXJTZXJ2aWNlLCBub3RpZmllckFuaW1hdGlvblNlcnZpY2U6IE5vdGlmaWVyQW5pbWF0aW9uU2VydmljZSk7XG4gICAgLyoqXG4gICAgICogQ29tcG9uZW50IGFmdGVyIHZpZXcgaW5pdCBsaWZlY3ljbGUgaG9vaywgc2V0dHMgdXAgdGhlIGNvbXBvbmVudCBhbmQgdGhlbiBlbWl0cyB0aGUgcmVhZHkgZXZlbnRcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG5vdGlmaWVyIGNvbmZpZ1xuICAgICAqXG4gICAgICogQHJldHVybnMgTm90aWZpZXIgY29uZmlndXJhdGlvblxuICAgICAqL1xuICAgIGdldENvbmZpZygpOiBOb3RpZmllckNvbmZpZztcbiAgICAvKipcbiAgICAgKiBHZXQgbm90aWZpY2F0aW9uIGVsZW1lbnQgaGVpZ2h0IChpbiBweClcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIE5vdGlmaWNhdGlvbiBlbGVtZW50IGhlaWdodCAoaW4gcHgpXG4gICAgICovXG4gICAgZ2V0SGVpZ2h0KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBHZXQgbm90aWZpY2F0aW9uIGVsZW1lbnQgd2lkdGggKGluIHB4KVxuICAgICAqXG4gICAgICogQHJldHVybnMgTm90aWZpY2F0aW9uIGVsZW1lbnQgaGVpZ2h0IChpbiBweClcbiAgICAgKi9cbiAgICBnZXRXaWR0aCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogR2V0IG5vdGlmaWNhdGlvbiBzaGlmdCBvZmZzZXQgKGluIHB4KVxuICAgICAqXG4gICAgICogQHJldHVybnMgTm90aWZpY2F0aW9uIGVsZW1lbnQgc2hpZnQgb2Zmc2V0IChpbiBweClcbiAgICAgKi9cbiAgICBnZXRTaGlmdCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2hvdyAoYW5pbWF0ZSBpbikgdGhpcyBub3RpZmljYXRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UsIHJlc29sdmVkIHdoZW4gZG9uZVxuICAgICAqL1xuICAgIHNob3coKTogUHJvbWlzZTx1bmRlZmluZWQ+O1xuICAgIC8qKlxuICAgICAqIEhpZGUgKGFuaW1hdGUgb3V0KSB0aGlzIG5vdGlmaWNhdGlvblxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSwgcmVzb2x2ZWQgd2hlbiBkb25lXG4gICAgICovXG4gICAgaGlkZSgpOiBQcm9taXNlPHVuZGVmaW5lZD47XG4gICAgLyoqXG4gICAgICogU2hpZnQgKG1vdmUpIHRoaXMgbm90aWZpY2F0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICBkaXN0YW5jZSAgICAgICAgIERpc3RhbmNlIHRvIHNoaWZ0IChpbiBweClcbiAgICAgKiBAcGFyYW0gICBzaGlmdFRvTWFrZVBsYWNlIEZsYWcsIGRlZmluaW5nIGluIHdoaWNoIGRpcmVjdGlvbiB0byBzaGlmdFxuICAgICAqIEByZXR1cm5zIFByb21pc2UsIHJlc29sdmVkIHdoZW4gZG9uZVxuICAgICAqL1xuICAgIHNoaWZ0KGRpc3RhbmNlOiBudW1iZXIsIHNoaWZ0VG9NYWtlUGxhY2U6IGJvb2xlYW4pOiBQcm9taXNlPHVuZGVmaW5lZD47XG4gICAgLyoqXG4gICAgICogSGFuZGxlIGNsaWNrIG9uIGRpc21pc3MgYnV0dG9uXG4gICAgICovXG4gICAgb25DbGlja0Rpc21pc3MoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBIYW5kbGUgbW91c2VvdmVyIG92ZXIgbm90aWZpY2F0aW9uIGFyZWFcbiAgICAgKi9cbiAgICBvbk5vdGlmaWNhdGlvbk1vdXNlb3ZlcigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBtb3VzZW91dCBmcm9tIG5vdGlmaWNhdGlvbiBhcmVhXG4gICAgICovXG4gICAgb25Ob3RpZmljYXRpb25Nb3VzZW91dCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBjbGljayBvbiBub3RpZmljYXRpb24gYXJlYVxuICAgICAqL1xuICAgIG9uTm90aWZpY2F0aW9uQ2xpY2soKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgYXV0byBoaWRlIHRpbWVyIChpZiBlbmFibGVkKVxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhcnRBdXRvSGlkZVRpbWVyKCk7XG4gICAgLyoqXG4gICAgICogUGF1c2UgdGhlIGF1dG8gaGlkZSB0aW1lciAoaWYgZW5hYmxlZClcbiAgICAgKi9cbiAgICBwcml2YXRlIHBhdXNlQXV0b0hpZGVUaW1lcigpO1xuICAgIC8qKlxuICAgICAqIENvbnRpbnVlIHRoZSBhdXRvIGhpZGUgdGltZXIgKGlmIGVuYWJsZWQpXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb250aW51ZUF1dG9IaWRlVGltZXIoKTtcbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBhdXRvIGhpZGUgdGltZXIgKGlmIGVuYWJsZWQpXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdG9wQXV0b0hpZGVUaW1lcigpO1xuICAgIC8qKlxuICAgICAqIEluaXRpYWwgbm90aWZpY2F0aW9uIHNldHVwXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXR1cCgpO1xufVxuIl19