import { ModuleWithProviders } from '@angular/core';
import { NotifierConfig, NotifierOptions } from './models/notifier-config.model';
/**
 * Factory for a notifier configuration with custom options
 *
 * Sidenote:
 * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.
 *
 * @param   options - Custom notifier options
 * @returns - Notifier configuration as result
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './components/notifier-container.component';
import * as ɵngcc2 from './components/notifier-notification.component';
import * as ɵngcc3 from '@angular/common';
export declare function notifierCustomConfigFactory(options: NotifierOptions): NotifierConfig;
/**
 * Factory for a notifier configuration with default options
 *
 * Sidenote:
 * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.
 *
 * @returns - Notifier configuration as result
 */
export declare function notifierDefaultConfigFactory(): NotifierConfig;
/**
 * Notifier module
 */
export declare class NotifierModule {
    /**
     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options
     *
     * @param   [options={}] - Custom notifier options
     * @returns - Notifier module with custom providers
     */
    static withConfig(options?: NotifierOptions): ModuleWithProviders<NotifierModule>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<NotifierModule, [typeof ɵngcc1.NotifierContainerComponent, typeof ɵngcc2.NotifierNotificationComponent], [typeof ɵngcc3.CommonModule], [typeof ɵngcc1.NotifierContainerComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<NotifierModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIubW9kdWxlLmQudHMiLCJzb3VyY2VzIjpbIm5vdGlmaWVyLm1vZHVsZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0RBb0JrRCxtQ0FBbUI7OztBQUNyRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vdGlmaWVyQ29uZmlnLCBOb3RpZmllck9wdGlvbnMgfSBmcm9tICcuL21vZGVscy9ub3RpZmllci1jb25maWcubW9kZWwnO1xuLyoqXG4gKiBGYWN0b3J5IGZvciBhIG5vdGlmaWVyIGNvbmZpZ3VyYXRpb24gd2l0aCBjdXN0b20gb3B0aW9uc1xuICpcbiAqIFNpZGVub3RlOlxuICogUmVxdWlyZWQgYXMgQW5ndWxhciBBb1QgY29tcGlsYXRpb24gY2Fubm90IGhhbmRsZSBkeW5hbWljIGZ1bmN0aW9uczsgc2VlIDxodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xMTI2Mj4uXG4gKlxuICogQHBhcmFtICAgb3B0aW9ucyAtIEN1c3RvbSBub3RpZmllciBvcHRpb25zXG4gKiBAcmV0dXJucyAtIE5vdGlmaWVyIGNvbmZpZ3VyYXRpb24gYXMgcmVzdWx0XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIG5vdGlmaWVyQ3VzdG9tQ29uZmlnRmFjdG9yeShvcHRpb25zOiBOb3RpZmllck9wdGlvbnMpOiBOb3RpZmllckNvbmZpZztcbi8qKlxuICogRmFjdG9yeSBmb3IgYSBub3RpZmllciBjb25maWd1cmF0aW9uIHdpdGggZGVmYXVsdCBvcHRpb25zXG4gKlxuICogU2lkZW5vdGU6XG4gKiBSZXF1aXJlZCBhcyBBbmd1bGFyIEFvVCBjb21waWxhdGlvbiBjYW5ub3QgaGFuZGxlIGR5bmFtaWMgZnVuY3Rpb25zOyBzZWUgPGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzExMjYyPi5cbiAqXG4gKiBAcmV0dXJucyAtIE5vdGlmaWVyIGNvbmZpZ3VyYXRpb24gYXMgcmVzdWx0XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIG5vdGlmaWVyRGVmYXVsdENvbmZpZ0ZhY3RvcnkoKTogTm90aWZpZXJDb25maWc7XG4vKipcbiAqIE5vdGlmaWVyIG1vZHVsZVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOb3RpZmllck1vZHVsZSB7XG4gICAgLyoqXG4gICAgICogU2V0dXAgdGhlIG5vdGlmaWVyIG1vZHVsZSB3aXRoIGN1c3RvbSBwcm92aWRlcnMsIGluIHRoaXMgY2FzZSB3aXRoIGEgY3VzdG9tIGNvbmZpZ3VyYXRpb24gYmFzZWQgb24gdGhlIGdpdm5lIG9wdGlvbnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIFtvcHRpb25zPXt9XSAtIEN1c3RvbSBub3RpZmllciBvcHRpb25zXG4gICAgICogQHJldHVybnMgLSBOb3RpZmllciBtb2R1bGUgd2l0aCBjdXN0b20gcHJvdmlkZXJzXG4gICAgICovXG4gICAgc3RhdGljIHdpdGhDb25maWcob3B0aW9ucz86IE5vdGlmaWVyT3B0aW9ucyk6IE1vZHVsZVdpdGhQcm92aWRlcnM7XG59XG4iXX0=