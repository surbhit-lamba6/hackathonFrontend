import { Subject } from 'rxjs';
import { NotifierAction } from './../models/notifier-action.model';
/**
 * Notifier queue service
 *
 * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls
 * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -
 * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and
 * processes them at the right time (which is when the previous action has been processed successfully).
 *
 * Technical sidenote:
 * An action looks pretty similar to the ones within the Flux / Redux pattern.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NotifierQueueService {
    /**
     * Stream of actions, subscribable from outside
     */
    readonly actionStream: Subject<NotifierAction>;
    /**
     * Queue of actions
     */
    private actionQueue;
    /**
     * Flag, true if some action is currently in progress
     */
    private isActionInProgress;
    /**
     * Constructor
     */
    constructor();
    /**
     * Push a new action to the queue, and try to run it
     *
     * @param action Action object
     */
    push(action: NotifierAction): void;
    /**
     * Continue with the next action (called when the current action is finished)
     */
    continue(): void;
    /**
     * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left
     */
    private tryToRunNextAction();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NotifierQueueService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NotifierQueueService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItcXVldWUuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJub3RpZmllci1xdWV1ZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5vdGlmaWVyQWN0aW9uIH0gZnJvbSAnLi8uLi9tb2RlbHMvbm90aWZpZXItYWN0aW9uLm1vZGVsJztcbi8qKlxuICogTm90aWZpZXIgcXVldWUgc2VydmljZVxuICpcbiAqIEluIGdlbmVyYWwsIEFQSSBjYWxscyBkb24ndCBnZXQgcHJvY2Vzc2VkIHJpZ2h0IGF3YXkuIEluc3RlYWQsIHdlIGhhdmUgdG8gcXVldWUgdGhlbSB1cCBpbiBvcmRlciB0byBwcmV2ZW50IHNpbXVsdGFuaW91cyBBUEkgY2FsbHNcbiAqIGludGVyZmVyaW5nIHdpdGggZWFjaCBvdGhlci4gVGhpcywgYXQgbGVhc3QgaW4gdGhlb3J5LCBpcyBwb3NzaWJsZSBhdCBhbnkgdGltZS4gSW4gcGFydGljdWxhciwgYW5pbWF0aW9ucyAtIHdoaWNoIHBvdGVudGlhbGx5IG92ZXJsYXAgLVxuICogY2FuIGNhdXNlIGNoYW5nZXMgaW4gSlMgY2xhc3NlcyBhcyB3ZWxsIGFzIGFmZmVjdCB0aGUgRE9NLiBUaGVyZWZvcmUsIHRoZSBxdWV1ZSBzZXJ2aWNlIHRha2VzIGFsbCBhY3Rpb25zLCBwdXRzIHRoZW0gaW4gYSBxdWV1ZSwgYW5kXG4gKiBwcm9jZXNzZXMgdGhlbSBhdCB0aGUgcmlnaHQgdGltZSAod2hpY2ggaXMgd2hlbiB0aGUgcHJldmlvdXMgYWN0aW9uIGhhcyBiZWVuIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkpLlxuICpcbiAqIFRlY2huaWNhbCBzaWRlbm90ZTpcbiAqIEFuIGFjdGlvbiBsb29rcyBwcmV0dHkgc2ltaWxhciB0byB0aGUgb25lcyB3aXRoaW4gdGhlIEZsdXggLyBSZWR1eCBwYXR0ZXJuLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOb3RpZmllclF1ZXVlU2VydmljZSB7XG4gICAgLyoqXG4gICAgICogU3RyZWFtIG9mIGFjdGlvbnMsIHN1YnNjcmliYWJsZSBmcm9tIG91dHNpZGVcbiAgICAgKi9cbiAgICByZWFkb25seSBhY3Rpb25TdHJlYW06IFN1YmplY3Q8Tm90aWZpZXJBY3Rpb24+O1xuICAgIC8qKlxuICAgICAqIFF1ZXVlIG9mIGFjdGlvbnNcbiAgICAgKi9cbiAgICBwcml2YXRlIGFjdGlvblF1ZXVlO1xuICAgIC8qKlxuICAgICAqIEZsYWcsIHRydWUgaWYgc29tZSBhY3Rpb24gaXMgY3VycmVudGx5IGluIHByb2dyZXNzXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0FjdGlvbkluUHJvZ3Jlc3M7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpO1xuICAgIC8qKlxuICAgICAqIFB1c2ggYSBuZXcgYWN0aW9uIHRvIHRoZSBxdWV1ZSwgYW5kIHRyeSB0byBydW4gaXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3Rpb24gQWN0aW9uIG9iamVjdFxuICAgICAqL1xuICAgIHB1c2goYWN0aW9uOiBOb3RpZmllckFjdGlvbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ29udGludWUgd2l0aCB0aGUgbmV4dCBhY3Rpb24gKGNhbGxlZCB3aGVuIHRoZSBjdXJyZW50IGFjdGlvbiBpcyBmaW5pc2hlZClcbiAgICAgKi9cbiAgICBjb250aW51ZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRyeSB0byBydW4gdGhlIG5leHQgYWN0aW9uIGluIHRoZSBxdWV1ZTsgd2Ugc2tpcCBpZiB0aGVyZSBhbHJlYWR5IGlzIHNvbWUgYWN0aW9uIGluIHByb2dyZXNzLCBvciBpZiB0aGVyZSBpcyBubyBhY3Rpb24gbGVmdFxuICAgICAqL1xuICAgIHByaXZhdGUgdHJ5VG9SdW5OZXh0QWN0aW9uKCk7XG59XG4iXX0=