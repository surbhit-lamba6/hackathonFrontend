/**
 * Notifier timer service
 *
 * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a
 * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NotifierTimerService {
    /**
     * Timestamp (in ms), created in the moment the timer starts
     */
    private now;
    /**
     * Remaining time (in ms)
     */
    private remaining;
    /**
     * Timeout ID, used for clearing the timeout later on
     */
    private timerId;
    /**
     * Promise resolve function, eventually getting called once the timer finishes
     */
    private finishPromiseResolver;
    /**
     * Constructor
     */
    constructor();
    /**
     * Start (or resume) the timer
     *
     * @param   duration Timer duration, in ms
     * @returns          Promise, resolved once the timer finishes
     */
    start(duration: number): Promise<undefined>;
    /**
     * Pause the timer
     */
    pause(): void;
    /**
     * Continue the timer
     */
    continue(): void;
    /**
     * Stop the timer
     */
    stop(): void;
    /**
     * Finish up the timeout by resolving the timer promise
     */
    private finish();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NotifierTimerService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NotifierTimerService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItdGltZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJub3RpZmllci10aW1lci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTm90aWZpZXIgdGltZXIgc2VydmljZVxuICpcbiAqIFRoaXMgc2VydmljZSBhY3RzIGFzIGEgdGltZXIsIG5lZWRlZCBkdWUgdG8gdGhlIHN0aWxsIHJhdGhlciBsaW1pdGVkIHNldFRpbWVvdXQgSmF2YVNjcmlwdCBBUEkuIFRoZSB0aW1lciBzZXJ2aWNlIGNhbiBzdGFydCBhbmQgc3RvcCBhXG4gKiB0aW1lci4gRnVydGhlcm1vcmUsIGl0IGNhbiBhbHNvIHBhdXNlIHRoZSB0aW1lciBhdCBhbnkgdGltZSwgYW5kIHJlc3VtZSBsYXRlciBvbi4gVGhlIHRpbWVyIEFQSSB3b3JrZCBwcm9taXNlLWJhc2VkLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOb3RpZmllclRpbWVyU2VydmljZSB7XG4gICAgLyoqXG4gICAgICogVGltZXN0YW1wIChpbiBtcyksIGNyZWF0ZWQgaW4gdGhlIG1vbWVudCB0aGUgdGltZXIgc3RhcnRzXG4gICAgICovXG4gICAgcHJpdmF0ZSBub3c7XG4gICAgLyoqXG4gICAgICogUmVtYWluaW5nIHRpbWUgKGluIG1zKVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVtYWluaW5nO1xuICAgIC8qKlxuICAgICAqIFRpbWVvdXQgSUQsIHVzZWQgZm9yIGNsZWFyaW5nIHRoZSB0aW1lb3V0IGxhdGVyIG9uXG4gICAgICovXG4gICAgcHJpdmF0ZSB0aW1lcklkO1xuICAgIC8qKlxuICAgICAqIFByb21pc2UgcmVzb2x2ZSBmdW5jdGlvbiwgZXZlbnR1YWxseSBnZXR0aW5nIGNhbGxlZCBvbmNlIHRoZSB0aW1lciBmaW5pc2hlc1xuICAgICAqL1xuICAgIHByaXZhdGUgZmluaXNoUHJvbWlzZVJlc29sdmVyO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKTtcbiAgICAvKipcbiAgICAgKiBTdGFydCAob3IgcmVzdW1lKSB0aGUgdGltZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIGR1cmF0aW9uIFRpbWVyIGR1cmF0aW9uLCBpbiBtc1xuICAgICAqIEByZXR1cm5zICAgICAgICAgIFByb21pc2UsIHJlc29sdmVkIG9uY2UgdGhlIHRpbWVyIGZpbmlzaGVzXG4gICAgICovXG4gICAgc3RhcnQoZHVyYXRpb246IG51bWJlcik6IFByb21pc2U8dW5kZWZpbmVkPjtcbiAgICAvKipcbiAgICAgKiBQYXVzZSB0aGUgdGltZXJcbiAgICAgKi9cbiAgICBwYXVzZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbnRpbnVlIHRoZSB0aW1lclxuICAgICAqL1xuICAgIGNvbnRpbnVlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgdGltZXJcbiAgICAgKi9cbiAgICBzdG9wKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRmluaXNoIHVwIHRoZSB0aW1lb3V0IGJ5IHJlc29sdmluZyB0aGUgdGltZXIgcHJvbWlzZVxuICAgICAqL1xuICAgIHByaXZhdGUgZmluaXNoKCk7XG59XG4iXX0=